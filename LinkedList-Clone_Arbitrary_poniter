/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        HashMap<Node,Node> map = new HashMap<Node, Node>();
        Node node = getCopy(head, map);
        Node ans = node;
        while(head != null){
            node.next = getCopy(head.next, map);
            node.random = getCopy(head.random, map);
            node = node.next;
            head = head.next;
        }
        return ans;
    }
    private Node getCopy(Node node, HashMap<Node, Node> map){
        if(node == null){
            return null;
        }
        if(map.containsKey(node)){
            return map.get(node);
        }
        Node n = new Node(node.val, null, null);
        map.put(node, n);
        return n;
    }
}
