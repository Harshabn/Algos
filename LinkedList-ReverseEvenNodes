

//Doesn't handle if even numbers in the beginning.


public void reverseEvenNodes(Node curr) {
		Node prev = null;
		Node lastEven = null;
		boolean evenFlag = false;
		while(curr != null) {
			if(curr.next != null && curr.next.data % 2 == 0) {
				if(!evenFlag) {
					prev = curr;				
				}
				evenFlag = true;
				curr = curr.next;
			} else {
				lastEven = curr;
				curr = curr.next;
				if(evenFlag) {
					Node n = reverse(prev.next, lastEven);
					prev.next = n;
					evenLastNode.next = curr;
				}
				evenFlag = false;
			}
		}
		
	}

	private Node evenLastNode = null;
	private Node reverse(Node prev, Node lastEven) {
		if(prev == lastEven) {
			return lastEven;
		}
		Node node = reverse(prev.next, lastEven);
		prev.next.next = prev;
		prev.next = null;
		evenLastNode = prev;
		return node;
	}
	
	
	============================================================================================
	..............Handles even if even numbers at the beginning..............
	
	public void reverseEvenNodes(Node curr) {
		Node prev = null;
		boolean evenFlag = false;
		Node beforeOdd = null;
		Node beforeEven = null;
		while(curr != null) {
			if(curr.data %2 == 0) {
				evenFlag = true;
				beforeOdd = curr;
			}else {
				if(prev == null) {
					prev = head;
				}else {
					prev = beforeEven;
					prev = prev.next;
				}
				if(evenFlag) {
					Node n = reverse(prev, beforeOdd);
					if(prev == head) {
						head = n;
						evenLastNode.next = curr;  
					}else {
						beforeEven.next = n;
						evenLastNode.next = curr;
					}
				}
				beforeEven = curr;
				evenFlag = false;
			}
			curr = curr.next;
		}
		if(beforeEven != curr) {
			Node n1 = reverse(beforeEven.next, beforeOdd);
			beforeEven.next = n1;
		}
	}

	private Node evenLastNode = null;
	private Node reverse(Node prev, Node lastEven) {
		if(prev == lastEven) {
			return lastEven;
		}
		Node node = reverse(prev.next, lastEven);
		prev.next.next = prev;
		prev.next = null;
		evenLastNode = prev;
		return node;
	}

=========================================To handle subsequent odd/even nodes at both the ends=========================

public void reverseEven3(Node curr) {
		Node prev = null;
		Node oddNode = null;
		Node evenNode = curr;
		int oddCount = 0;
		int evenCount = 0;
		while(curr != null) {
			if(curr.data % 2 == 0) {
				evenNode = curr;
				evenCount++;
			}else {
				if(evenCount > 1) {
					if(oddNode == null) {
						prev = head;
					}else {
						prev = oddNode.next;
					}
					Node n = rev(prev, evenNode);
					if(oddNode == null) {
						head = n;
					}else {
						oddNode.next = n;
					}
					lastEle.next = curr;
					evenCount = 0;
					oddCount = 0;
				}
				oddNode = curr;
				if(oddCount == 1 && evenCount == 1) {
					oddCount = 0;
					evenCount = 0;
				}
				oddCount++;
			}
			curr = curr.next;
			if(curr == null && evenCount > 1) {
				oddNode.next = rev(oddNode.next, curr);
			}
		}
		
	}

	private Node lastEle = null;
	private Node rev(Node curr, Node prev) {
		if(curr.next == null || curr == prev) {
			return curr;
		}
		Node n = rev(curr.next, prev);
		curr.next.next = curr;
		curr.next = null;
		lastEle = curr;
		return n;
	}
	
	
	
