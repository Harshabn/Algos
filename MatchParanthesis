class Stack
{
    public static Character[] stack;
    static int index = 0;

    Stack()
    {
        stack = new Character[10];
    }

    public static void push(final Character ch)
    {
        index++;
        stack[index] = ch;
    }

    public static Character pop()
    {
        final Character ch = stack[index];
        index--;
        return ch;
    }
}
public class MatchParenthesis
{
    int index = 0;
    public static Map<Character, Character> pMap = new HashMap<Character, Character>();
    public static Set<Character> mapSet = new HashSet<Character>();

    static
    {
        pMap.put('}', '{');
        pMap.put(']', '[');
        pMap.put(')', '(');
        mapSet.addAll(pMap.values());
    }

    /**
     * @param args
     */
    public static void main(final String[] args)
    {
        final Stack stack = new Stack();
        final String string = "{(x+y)+((a+b))}";
        final char[] str = string.toCharArray();
        boolean valid = true;
        for (int i = 0; i < string.length(); i++)
        {
            final char element = string.charAt(i);
            if (mapSet.contains(element))
            {
                Stack.push(element);
            }
            if (pMap.containsKey(element))
            {
                final Character ch = Stack.pop();
                System.out.println("Pop ele : " + ch);
                System.out.println("Pop ele element: " + element);

                if (ch == null || !ch.equals(pMap.get(element)))
                {
                    valid = false;
                }
            }
        }
        if (valid && Stack.index == 0)//Check whether stack has more elements left in it.
        {
            System.out.println("Valid expression");
        }
        else
        {
            System.out.println("Not a valid expression....");
        }
    }

}
