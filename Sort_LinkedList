/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode first) {
        if(first==null || first.next==null) {
    		return first;
    	}
    	ListNode ptr1 = first;
    	ListNode ptr2 = first;
    	ListNode temp = first;
    	while(ptr2!=null && ptr2.next!=null) {
    		temp=ptr1;
    		ptr1=ptr1.next;
    		ptr2=ptr2.next.next;
    	}
    	//System.out.println(temp.data + " "+ptr1.data);
    	temp.next=null;
    	ListNode n1 = sortList(first);
    	ListNode n2 = sortList(ptr1);
    	return merge(n1,n2);
    }
    
    public ListNode merge(ListNode ptr1 , ListNode ptr2){
    	ListNode temp1=new ListNode(0);
    	ListNode temp2=temp1;
    	while(ptr1 != null && ptr2 != null) {
    		if(ptr1.val < ptr2.val) {
    			temp2.next=ptr1;
    			ptr1=ptr1.next;
    			
    		}else {
    			temp2.next=ptr2;
    			ptr2=ptr2.next;
    		}
    		temp2=temp2.next;
    	}
    	if(ptr1!=null) {
    		temp2.next=ptr1;
    		ptr1=ptr1.next;
    	}
    	if(ptr2!=null) {
    		temp2.next=ptr2;
    		ptr2=ptr2.next;
    	}
    	return temp1.next;
    }
}
